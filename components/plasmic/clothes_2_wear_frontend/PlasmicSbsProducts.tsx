// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dZbt1US7JmqH4GfLm2r4uE
// Component: Z55r6nCTgXdy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: dZbt1US7JmqH4GfLm2r4uE/projectcss
import sty from "./PlasmicSbsProducts.module.css"; // plasmic-import: Z55r6nCTgXdy/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: MkJgUqsQnajD/icon

createPlasmicElementProxy;

export type PlasmicSbsProducts__VariantMembers = {};
export type PlasmicSbsProducts__VariantsArgs = {};
type VariantPropType = keyof PlasmicSbsProducts__VariantsArgs;
export const PlasmicSbsProducts__VariantProps = new Array<VariantPropType>();

export type PlasmicSbsProducts__ArgsType = {
  currentItem?: any;
};
type ArgPropType = keyof PlasmicSbsProducts__ArgsType;
export const PlasmicSbsProducts__ArgProps = new Array<ArgPropType>(
  "currentItem"
);

export type PlasmicSbsProducts__OverridesType = {
  sbsProduct?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  svg?: Flex__<"svg">;
};

export interface DefaultSbsProductsProps {
  currentItem?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSbsProducts__RenderFunc(props: {
  variants: PlasmicSbsProducts__VariantsArgs;
  args: PlasmicSbsProducts__ArgsType;
  overrides: PlasmicSbsProducts__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const [isSbsProductHover, triggerSbsProductHoverProps] = useTrigger(
    "useHover",
    {}
  );
  const triggers = {
    hover_sbsProduct: isSbsProductHover
  };

  return (
    <div
      data-plasmic-name={"sbsProduct"}
      data-plasmic-override={overrides.sbsProduct}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.sbsProduct
      )}
      data-plasmic-trigger-props={[triggerSbsProductHoverProps]}
    >
      <Reveal
        className={classNames("__wab_instance", sty.reveal__zc2Bv)}
        effect={"flip"}
        triggerOnce={true}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"100%"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={(() => {
            try {
              return $props.currentItem.imageUrl;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </Reveal>
      <Reveal
        className={classNames("__wab_instance", sty.reveal__zZok)}
        effect={"fade"}
        triggerOnce={true}
      >
        <div className={classNames(projectcss.all, sty.freeBox__iyKsG)}>
          <div className={classNames(projectcss.all, sty.freeBox___4Aja)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fiS3S
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.currentItem.description;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Hii Guys I am Sunny leone and i want to share my dress code with all of you guys. Only Guys So guys without wasting anymore time lets jump to my dress";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___4WpHs)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__e1EnY
                )}
              >
                {"Buy Now"}
              </div>
              <Icon2Icon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            </div>
          </div>
        </div>
      </Reveal>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  sbsProduct: ["sbsProduct", "img", "svg"],
  img: ["img"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  sbsProduct: "div";
  img: typeof PlasmicImg__;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSbsProducts__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSbsProducts__VariantsArgs;
    args?: PlasmicSbsProducts__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSbsProducts__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSbsProducts__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSbsProducts__ArgProps,
          internalVariantPropNames: PlasmicSbsProducts__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSbsProducts__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "sbsProduct") {
    func.displayName = "PlasmicSbsProducts";
  } else {
    func.displayName = `PlasmicSbsProducts.${nodeName}`;
  }
  return func;
}

export const PlasmicSbsProducts = Object.assign(
  // Top-level PlasmicSbsProducts renders the root element
  makeNodeComponent("sbsProduct"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicSbsProducts
    internalVariantProps: PlasmicSbsProducts__VariantProps,
    internalArgProps: PlasmicSbsProducts__ArgProps
  }
);

export default PlasmicSbsProducts;
/* prettier-ignore-end */
