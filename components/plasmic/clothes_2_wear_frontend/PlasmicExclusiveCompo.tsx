// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dZbt1US7JmqH4GfLm2r4uE
// Component: 1vSXOXH4_klA

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: dZbt1US7JmqH4GfLm2r4uE/projectcss
import sty from "./PlasmicExclusiveCompo.module.css"; // plasmic-import: 1vSXOXH4_klA/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: MkJgUqsQnajD/icon

createPlasmicElementProxy;

export type PlasmicExclusiveCompo__VariantMembers = {};
export type PlasmicExclusiveCompo__VariantsArgs = {};
type VariantPropType = keyof PlasmicExclusiveCompo__VariantsArgs;
export const PlasmicExclusiveCompo__VariantProps = new Array<VariantPropType>();

export type PlasmicExclusiveCompo__ArgsType = {};
type ArgPropType = keyof PlasmicExclusiveCompo__ArgsType;
export const PlasmicExclusiveCompo__ArgProps = new Array<ArgPropType>();

export type PlasmicExclusiveCompo__OverridesType = {
  root?: Flex__<"div">;
  dataFetcher?: Flex__<typeof Fetcher>;
  svg?: Flex__<"svg">;
};

export interface DefaultExclusiveCompoProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicExclusiveCompo__RenderFunc(props: {
  variants: PlasmicExclusiveCompo__VariantsArgs;
  args: PlasmicExclusiveCompo__ArgsType;
  overrides: PlasmicExclusiveCompo__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Fetcher
        data-plasmic-name={"dataFetcher"}
        data-plasmic-override={overrides.dataFetcher}
        className={classNames("__wab_instance", sty.dataFetcher)}
        dataOp={{
          sourceId: "dYjrnE7kgSENFfU7cKYETx",
          opId: "55b133fc-856a-455a-99ce-95df6e480e78",
          userArgs: {},
          cacheKey: `plasmic.$.S8mswwNSs0e5.$.55b133fc-856a-455a-99ce-95df6e480e78.$.`,
          invalidatedKeys: null,
          roleId: null
        }}
        queries={{}}
      >
        {($queries: any) => (
          <div className={classNames(projectcss.all, sty.freeBox___95Qdf)}>
            <div className={classNames(projectcss.all, sty.freeBox___0ZkJ)}>
              <div className={classNames(projectcss.all, sty.freeBox__ac5MG)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__haypn)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return $queries.data.data.response.exclusiveCollections[0]
                        .imageUrl;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <div className={classNames(projectcss.all, sty.freeBox__bDbAp)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__f5Nue
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return undefined;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Category Name -";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5HkqN
                    )}
                  >
                    {"Denim Saree with Anarkali Disco HD Lehenga Chunni "}
                  </div>
                </div>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__oqif)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__bE1Yv)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return $queries.data.data.response.exclusiveCollections[1]
                        .imageUrl;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <div className={classNames(projectcss.all, sty.freeBox__rG2Bj)}>
                  <Icon2Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                </div>
              </Stack__>
            </div>
          </div>
        )}
      </Fetcher>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "dataFetcher", "svg"],
  dataFetcher: ["dataFetcher", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dataFetcher: typeof Fetcher;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicExclusiveCompo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicExclusiveCompo__VariantsArgs;
    args?: PlasmicExclusiveCompo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicExclusiveCompo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicExclusiveCompo__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicExclusiveCompo__ArgProps,
          internalVariantPropNames: PlasmicExclusiveCompo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicExclusiveCompo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicExclusiveCompo";
  } else {
    func.displayName = `PlasmicExclusiveCompo.${nodeName}`;
  }
  return func;
}

export const PlasmicExclusiveCompo = Object.assign(
  // Top-level PlasmicExclusiveCompo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dataFetcher: makeNodeComponent("dataFetcher"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicExclusiveCompo
    internalVariantProps: PlasmicExclusiveCompo__VariantProps,
    internalArgProps: PlasmicExclusiveCompo__ArgProps
  }
);

export default PlasmicExclusiveCompo;
/* prettier-ignore-end */
