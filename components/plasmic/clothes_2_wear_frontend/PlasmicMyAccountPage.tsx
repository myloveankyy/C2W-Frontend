// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dZbt1US7JmqH4GfLm2r4uE
// Component: bZwk4OduRHui

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Announcement from "../../Announcement"; // plasmic-import: 74wMr0MHOIvu/component
import TextInput from "../../TextInput"; // plasmic-import: bHBHAUgVrtBR/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import Button from "../../Button"; // plasmic-import: WchpUmJB60Ft/component
import Drawer2 from "../../Drawer2"; // plasmic-import: z4jI45IOYaM3/component

import { useScreenVariants as useScreenVariantsy0D3Ma4XqRe } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: _y0d3MA4xqRe/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: dZbt1US7JmqH4GfLm2r4uE/projectcss
import sty from "./PlasmicMyAccountPage.module.css"; // plasmic-import: bZwk4OduRHui/css

import CameraSolidSvgIcon from "./icons/PlasmicIcon__CameraSolidSvg"; // plasmic-import: C3ZrrS_8LKbK/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: LS0ubhvcdrsH/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rznPUGrd75r9/icon
import MagnifyingGlassSolidSvgIcon from "./icons/PlasmicIcon__MagnifyingGlassSolidSvg"; // plasmic-import: an2URTFtaTp3/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: x5fTWtxe2UfF/icon
import BarsSolidSvgIcon from "./icons/PlasmicIcon__BarsSolidSvg"; // plasmic-import: 3aXbJJjOhwMm/icon
import CircleUserSolidSvgIcon from "./icons/PlasmicIcon__CircleUserSolidSvg"; // plasmic-import: tw1leLohR_B9/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: MkJgUqsQnajD/icon
import HeartSolidSvgIcon from "./icons/PlasmicIcon__HeartSolidSvg"; // plasmic-import: fP9zRu2keVnl/icon

createPlasmicElementProxy;

export type PlasmicMyAccountPage__VariantMembers = {};
export type PlasmicMyAccountPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicMyAccountPage__VariantsArgs;
export const PlasmicMyAccountPage__VariantProps = new Array<VariantPropType>();

export type PlasmicMyAccountPage__ArgsType = {};
type ArgPropType = keyof PlasmicMyAccountPage__ArgsType;
export const PlasmicMyAccountPage__ArgProps = new Array<ArgPropType>();

export type PlasmicMyAccountPage__OverridesType = {
  root?: Flex__<"div">;
  announcement?: Flex__<typeof Announcement>;
  headerSection?: Flex__<"section">;
  header?: Flex__<"header">;
  textInput?: Flex__<typeof TextInput>;
  buttonSections?: Flex__<"div">;
  dataFetcher2?: Flex__<typeof Fetcher>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  categoryStack?: Flex__<"div">;
  dataFetcher?: Flex__<typeof Fetcher>;
  categoryBtn?: Flex__<"div">;
  h1?: Flex__<"h1">;
  button?: Flex__<typeof Button>;
  drawer2?: Flex__<typeof Drawer2>;
  dataFetcher3?: Flex__<typeof Fetcher>;
};

export interface DefaultMyAccountPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMyAccountPage__RenderFunc(props: {
  variants: PlasmicMyAccountPage__VariantsArgs;
  args: PlasmicMyAccountPage__ArgsType;
  overrides: PlasmicMyAccountPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "drawer2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsy0D3Ma4XqRe()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Announcement
            data-plasmic-name={"announcement"}
            data-plasmic-override={overrides.announcement}
            className={classNames("__wab_instance", sty.announcement)}
          />

          <section
            data-plasmic-name={"headerSection"}
            data-plasmic-override={overrides.headerSection}
            className={classNames(projectcss.all, sty.headerSection)}
          >
            <header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(projectcss.all, sty.header)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__xqEi4)}>
                <CameraSolidSvgIcon
                  className={classNames(projectcss.all, sty.svg___8KRhi)}
                  role={"img"}
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox___1GJtf)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1Jnp1)}
                  >
                    <TextInput
                      data-plasmic-name={"textInput"}
                      data-plasmic-override={overrides.textInput}
                      autoFocus={undefined}
                      className={classNames("__wab_instance", sty.textInput)}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={(() => {
                        try {
                          return $queries.query.data.response[0].text;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      required={true}
                      type={"text"}
                      value={
                        generateStateValueProp($state, [
                          "textInput",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </div>
                <MagnifyingGlassSolidSvgIcon
                  className={classNames(projectcss.all, sty.svg__e4Qw)}
                  role={"img"}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__dtzO9)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___31JB4)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"293px"}
                  loading={"eager"}
                  src={{
                    src: "/plasmic/clothes_2_wear_frontend/images/c2WFullPng.png",
                    fullWidth: 1280,
                    fullHeight: 250,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div
                data-plasmic-name={"buttonSections"}
                data-plasmic-override={overrides.buttonSections}
                className={classNames(projectcss.all, sty.buttonSections)}
              >
                <Fetcher
                  data-plasmic-name={"dataFetcher2"}
                  data-plasmic-override={overrides.dataFetcher2}
                  className={classNames("__wab_instance", sty.dataFetcher2)}
                  dataOp={{
                    sourceId: "wJJYKRKmy66qLjpwedisBb",
                    opId: "36380aa0-8960-4d31-80ef-b1ff0c4cbd70",
                    userArgs: {},
                    cacheKey: `plasmic.$.9fZLm54Kupji.$.36380aa0-8960-4d31-80ef-b1ff0c4cbd70.$.`,
                    invalidatedKeys: null,
                    roleId: null
                  }}
                  queries={{}}
                >
                  {($queries: any) =>
                    (_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.data.data.response;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <PlasmicLink__
                          data-plasmic-name={"link"}
                          data-plasmic-override={overrides.link}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link
                          )}
                          component={Link}
                          key={currentIndex}
                          platform={"nextjs"}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__prkcU)}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={(() => {
                              try {
                                return currentItem.iconUrl;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__el5SH
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Favorite";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </PlasmicLink__>
                      );
                    })
                  }
                </Fetcher>
                <div className={classNames(projectcss.all, sty.freeBox__ubif9)}>
                  <Icon11Icon
                    className={classNames(projectcss.all, sty.svg__wxgYw)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___15JR9
                    )}
                  >
                    {"My Account"}
                  </div>
                </div>
              </div>
            </header>
            <div className={classNames(projectcss.all, sty.freeBox___9MANx)}>
              <Stack__
                as={"div"}
                data-plasmic-name={"categoryStack"}
                data-plasmic-override={overrides.categoryStack}
                hasGap={true}
                className={classNames(projectcss.all, sty.categoryStack)}
              >
                <Fetcher
                  data-plasmic-name={"dataFetcher"}
                  data-plasmic-override={overrides.dataFetcher}
                  className={classNames("__wab_instance", sty.dataFetcher)}
                  dataOp={{
                    sourceId: "bQuZs1RaGGXQ9YtwVrdvLX",
                    opId: "fa535e4b-76b4-4cca-8dbd-9aea92b7208b",
                    userArgs: {},
                    cacheKey: `plasmic.$.V4ii5JIroVQX.$.fa535e4b-76b4-4cca-8dbd-9aea92b7208b.$.`,
                    invalidatedKeys: null,
                    roleId: null
                  }}
                  queries={{}}
                >
                  {($queries: any) =>
                    (_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.data.data.response;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          data-plasmic-name={"categoryBtn"}
                          data-plasmic-override={overrides.categoryBtn}
                          className={classNames(
                            projectcss.all,
                            sty.categoryBtn
                          )}
                          key={currentIndex}
                        >
                          <h1
                            data-plasmic-name={"h1"}
                            data-plasmic-override={overrides.h1}
                            className={classNames(
                              projectcss.all,
                              projectcss.h1,
                              projectcss.__wab_text,
                              sty.h1
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "MEN";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h1>
                        </div>
                      );
                    })
                  }
                </Fetcher>
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__k3Y0L)}>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "clear"
                      : undefined
                  }
                >
                  <Drawer2
                    data-plasmic-name={"drawer2"}
                    data-plasmic-override={overrides.drawer2}
                    className={classNames("__wab_instance", sty.drawer2)}
                    onOpenChange={generateStateOnChangeProp($state, [
                      "drawer2",
                      "open"
                    ])}
                    open={generateStateValueProp($state, ["drawer2", "open"])}
                    trigger={
                      <React.Fragment>
                        <BarsSolidSvgIcon
                          className={classNames(projectcss.all, sty.svg___8DFB)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jR0Xe
                          )}
                        >
                          {"Show dialog"}
                        </div>
                      </React.Fragment>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wpVx5
                      )}
                    >
                      {"CLOTHES2WEAR"}
                    </div>
                  </Drawer2>
                </Button>
              ) : null}
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___8I8Hl)}
                displayHeight={"29px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"159px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/clothes_2_wear_frontend/images/c2WFullPng.png",
                  fullWidth: 1280,
                  fullHeight: 250,
                  aspectRatio: undefined
                }}
              />

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bsG3D)}
              >
                <Fetcher
                  data-plasmic-name={"dataFetcher3"}
                  data-plasmic-override={overrides.dataFetcher3}
                  className={classNames("__wab_instance", sty.dataFetcher3)}
                  dataOp={{
                    sourceId: "wJJYKRKmy66qLjpwedisBb",
                    opId: "36380aa0-8960-4d31-80ef-b1ff0c4cbd70",
                    userArgs: {},
                    cacheKey: `plasmic.$.c3Pf1hm1Lx2e.$.36380aa0-8960-4d31-80ef-b1ff0c4cbd70.$.`,
                    invalidatedKeys: null,
                    roleId: null
                  }}
                  queries={{}}
                >
                  {($queries: any) =>
                    (_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.data.data.response;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__neHfH)}
                          displayHeight={"20px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          key={currentIndex}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return currentItem.iconUrl;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      );
                    })
                  }
                </Fetcher>
              </Stack__>
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "announcement",
    "headerSection",
    "header",
    "textInput",
    "buttonSections",
    "dataFetcher2",
    "link",
    "categoryStack",
    "dataFetcher",
    "categoryBtn",
    "h1",
    "button",
    "drawer2",
    "dataFetcher3"
  ],
  announcement: ["announcement"],
  headerSection: [
    "headerSection",
    "header",
    "textInput",
    "buttonSections",
    "dataFetcher2",
    "link",
    "categoryStack",
    "dataFetcher",
    "categoryBtn",
    "h1",
    "button",
    "drawer2",
    "dataFetcher3"
  ],
  header: ["header", "textInput", "buttonSections", "dataFetcher2", "link"],
  textInput: ["textInput"],
  buttonSections: ["buttonSections", "dataFetcher2", "link"],
  dataFetcher2: ["dataFetcher2", "link"],
  link: ["link"],
  categoryStack: ["categoryStack", "dataFetcher", "categoryBtn", "h1"],
  dataFetcher: ["dataFetcher", "categoryBtn", "h1"],
  categoryBtn: ["categoryBtn", "h1"],
  h1: ["h1"],
  button: ["button", "drawer2"],
  drawer2: ["drawer2"],
  dataFetcher3: ["dataFetcher3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  announcement: typeof Announcement;
  headerSection: "section";
  header: "header";
  textInput: typeof TextInput;
  buttonSections: "div";
  dataFetcher2: typeof Fetcher;
  link: "a";
  categoryStack: "div";
  dataFetcher: typeof Fetcher;
  categoryBtn: "div";
  h1: "h1";
  button: typeof Button;
  drawer2: typeof Drawer2;
  dataFetcher3: typeof Fetcher;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMyAccountPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMyAccountPage__VariantsArgs;
    args?: PlasmicMyAccountPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMyAccountPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMyAccountPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMyAccountPage__ArgProps,
          internalVariantPropNames: PlasmicMyAccountPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMyAccountPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMyAccountPage";
  } else {
    func.displayName = `PlasmicMyAccountPage.${nodeName}`;
  }
  return func;
}

export const PlasmicMyAccountPage = Object.assign(
  // Top-level PlasmicMyAccountPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    announcement: makeNodeComponent("announcement"),
    headerSection: makeNodeComponent("headerSection"),
    header: makeNodeComponent("header"),
    textInput: makeNodeComponent("textInput"),
    buttonSections: makeNodeComponent("buttonSections"),
    dataFetcher2: makeNodeComponent("dataFetcher2"),
    link: makeNodeComponent("link"),
    categoryStack: makeNodeComponent("categoryStack"),
    dataFetcher: makeNodeComponent("dataFetcher"),
    categoryBtn: makeNodeComponent("categoryBtn"),
    h1: makeNodeComponent("h1"),
    button: makeNodeComponent("button"),
    drawer2: makeNodeComponent("drawer2"),
    dataFetcher3: makeNodeComponent("dataFetcher3"),

    // Metadata about props expected for PlasmicMyAccountPage
    internalVariantProps: PlasmicMyAccountPage__VariantProps,
    internalArgProps: PlasmicMyAccountPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMyAccountPage;
/* prettier-ignore-end */
