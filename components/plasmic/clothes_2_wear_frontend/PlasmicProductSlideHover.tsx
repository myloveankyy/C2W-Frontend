// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dZbt1US7JmqH4GfLm2r4uE
// Component: wu93WXG_4h4a

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";

import { useScreenVariants as useScreenVariantsy0D3Ma4XqRe } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: _y0d3MA4xqRe/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: dZbt1US7JmqH4GfLm2r4uE/projectcss
import sty from "./PlasmicProductSlideHover.module.css"; // plasmic-import: wu93WXG_4h4a/css

import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: fHrBi3K8e_fs/icon

createPlasmicElementProxy;

export type PlasmicProductSlideHover__VariantMembers = {};
export type PlasmicProductSlideHover__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductSlideHover__VariantsArgs;
export const PlasmicProductSlideHover__VariantProps =
  new Array<VariantPropType>();

export type PlasmicProductSlideHover__ArgsType = {
  currentItem?: any;
};
type ArgPropType = keyof PlasmicProductSlideHover__ArgsType;
export const PlasmicProductSlideHover__ArgProps = new Array<ArgPropType>(
  "currentItem"
);

export type PlasmicProductSlideHover__OverridesType = {
  productFullStck?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  text?: Flex__<"div">;
};

export interface DefaultProductSlideHoverProps {
  currentItem?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductSlideHover__RenderFunc(props: {
  variants: PlasmicProductSlideHover__VariantsArgs;
  args: PlasmicProductSlideHover__ArgsType;
  overrides: PlasmicProductSlideHover__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const [isProductFullStckHover, triggerProductFullStckHoverProps] = useTrigger(
    "useHover",
    {}
  );
  const triggers = {
    hover_productFullStck: isProductFullStckHover
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsy0D3Ma4XqRe()
  });

  return (
    <div
      data-plasmic-name={"productFullStck"}
      data-plasmic-override={overrides.productFullStck}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.productFullStck
      )}
      data-plasmic-trigger-props={[triggerProductFullStckHoverProps]}
    >
      <Reveal
        className={classNames("__wab_instance", sty.reveal___4W9Ym)}
        direction={triggers.hover_productFullStck ? "vertical" : undefined}
        effect={"flip"}
        triggerOnce={true}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "130px"
              : "296px"
          }
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "132px"
              : "221px"
          }
          loading={"eager"}
          src={(() => {
            try {
              return $props.currentItem.imageUrl;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </Reveal>
      <div className={classNames(projectcss.all, sty.freeBox___8L6Gp)} />

      <div className={classNames(projectcss.all, sty.freeBox__wYtz9)} />

      <Reveal
        className={classNames("__wab_instance", sty.reveal__ue31)}
        effect={"jackinthebox"}
        triggerOnce={true}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__nglgO)}
        >
          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1__zGmeb
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.currentItem.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Alia Bhatt Suit Anarkali Lehenga with Western Style Blouse";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h1>
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.currentItem.description;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Buy ultimate lehenga saree of alia bhatt with designer aniket pradhan. The world best designer holding more than 500 bn assets compounding interest.";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1__b2Ol
            )}
          >
            {"\u20b910,00,000"}
          </h1>
          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1__dkZd5
            )}
          >
            {"\u20b910,00,000"}
          </h1>
          <div className={classNames(projectcss.all, sty.freeBox__nRpIg)}>
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1___9Iiql
              )}
            >
              {"Buy now"}
            </h1>
            <Icon10Icon
              className={classNames(projectcss.all, sty.svg__m5Nfi)}
              role={"img"}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___3QdJq)}>
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__bs3Md
              )}
            >
              {"Add to cart"}
            </h1>
            <Icon10Icon
              className={classNames(projectcss.all, sty.svg__mpHb5)}
              role={"img"}
            />
          </div>
        </Stack__>
      </Reveal>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  productFullStck: ["productFullStck", "img", "text"],
  img: ["img"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  productFullStck: "div";
  img: typeof PlasmicImg__;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductSlideHover__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductSlideHover__VariantsArgs;
    args?: PlasmicProductSlideHover__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductSlideHover__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductSlideHover__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductSlideHover__ArgProps,
          internalVariantPropNames: PlasmicProductSlideHover__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductSlideHover__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "productFullStck") {
    func.displayName = "PlasmicProductSlideHover";
  } else {
    func.displayName = `PlasmicProductSlideHover.${nodeName}`;
  }
  return func;
}

export const PlasmicProductSlideHover = Object.assign(
  // Top-level PlasmicProductSlideHover renders the root element
  makeNodeComponent("productFullStck"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicProductSlideHover
    internalVariantProps: PlasmicProductSlideHover__VariantProps,
    internalArgProps: PlasmicProductSlideHover__ArgProps
  }
);

export default PlasmicProductSlideHover;
/* prettier-ignore-end */
